#!/usr/bin/env python

"""
Parse a the test runner XML output generated by Check and convert it to the
junit XML format.

usage: check2junitxml.py [-h] [-o OUTPUT_PATH] input_path
"""

import sys
import argparse
import re
import types
import dateutil.parser
import xml.etree.ElementTree as ET

NS_SPLIT_PATTERN = re.compile(ur'\{(.*)\}(.*)$')


def split_ns_from_tag(tag):
    """
    >>> split_ns_from_tag('{http://check.sourceforge.net/ns}testsuites')
    ('http://check.sourceforge.net/ns', 'testsuites')
    >>> split_ns_from_tag('testsuites')
    (None, 'testsuites')
    >>> try:
    ...   split_ns_from_tag(None)
    ... except AssertionError, e:
    ...   print e
    tag can't be None
    >>> try:
    ...   split_ns_from_tag(2)
    ... except AssertionError, e:
    ...   print e
    tag must be a string

    """
    assert tag is not None, "tag can't be None"
    assert type(tag) is types.StringType, "tag must be a string"

    match = re.match(NS_SPLIT_PATTERN, tag)
    if(match):
        return match.groups()
    return (None, tag)


def junit_case_from_check_case(check_case):
    """
    >>> success = ET.XML('''<test result="success" xmlns="http://check.sourceforge.net/ns">
    ...   <path>.</path>
    ...   <fn>ex_xml_output.c:8</fn>
    ...   <id>test_pass</id>
    ...   <description>Core</description>
    ...   <message>Passed</message>
    ... </test>''')
    >>> failure = ET.XML('''<test result="failure" xmlns="http://check.sourceforge.net/ns">
    ...   <path>.</path>
    ...   <fn>ex_xml_output.c:14</fn>
    ...   <id>test_fail</id>
    ...   <description>Core</description>
    ...   <message>Failure</message>
    ... </test>''')
    >>> error = ET.XML('''<test result="error" xmlns="http://check.sourceforge.net/ns">
    ...   <path>.</path>
    ...   <fn>ex_xml_output.c:18</fn>
    ...   <id>test_exit</id>
    ...   <description>Core</description>
    ...   <message>Early exit with return value 1</message>
    ... </test>''')
    >>> s = junit_case_from_check_case(success)
    >>> s.attrib
    {'classname': 'ex_xml_output.c:8', 'name': 'test_pass', 'time': '0.0'}
    >>> len(s)
    0
    >>> f = junit_case_from_check_case(failure)
    >>> f.attrib
    {'classname': 'ex_xml_output.c:14', 'name': 'test_fail', 'time': '0.0'}
    >>> len(f)
    1
    >>> f[0].attrib['message'] = 'Failure'
    >>> e = junit_case_from_check_case(error)
    >>> e.attrib
    {'classname': 'ex_xml_output.c:18', 'name': 'test_exit', 'time': '0.0'}
    >>> len(e)
    1
    >>> e[0].attrib['message'] = 'Early exit with return value 1'
    """
    ns, tag = split_ns_from_tag(check_case.tag)
    result = check_case.attrib['result']
    name = check_case.find(".//{%s}id" % ns)
    classname = check_case.find(".//{%s}fn" % ns)
    message = check_case.find(".//{%s}message" % ns)
    case = ET.Element('testcase', {'name': name.text, 'classname': classname.text, 'time':'0.0'})
    if(result == "failure"):
        case.append(ET.Element('failure', {'message': message.text or ''}))
    if(result == "error"):
        case.append(ET.Element('error', {'message': message.text or ''}))
    return case


def junit_tests_from_check_suite(check_suite):
    """
    >>> __check_suite = ET.XML('''<suite xmlns="http://check.sourceforge.net/ns">
    ...   <title>S1</title>
    ...   <test result="success">
    ...     <path>.</path>
    ...     <fn>ex_xml_output.c:8</fn>
    ...     <id>test_pass</id>
    ...     <description>Core</description>
    ...     <message>Passed</message>
    ...   </test>
    ...   <test result="failure">
    ...     <path>.</path>
    ...     <fn>ex_xml_output.c:14</fn>
    ...     <id>test_fail</id>
    ...     <description>Core</description>
    ...     <message>Failure</message>
    ...   </test>
    ... </suite>''')
    >>> name, test_list = junit_tests_from_check_suite(__check_suite)
    >>> name
    'S1'
    >>> len(test_list)
    2
    """
    ns, tag = split_ns_from_tag(check_suite.tag)
    title = check_suite.find(".//{%s}title" % ns)
    tests = [junit_case_from_check_case(case) for case in check_suite.findall(".//{%s}test" % ns)]

    return title.text, tests


def junit_etree_from_check_etree(check_etree):
    """
    >>> tree = ET.ElementTree(ET.XML(__check_test_string))
    >>> junit = junit_etree_from_check_etree(tree)
    >>> root = junit.getroot()
    >>> root.tag
    'testsuite'
    >>> root.attrib
    {'tests': '4', 'errors': '1', 'name': 'S1,S2', 'timestamp': '2004-08-20T12:53:32', 'time': '0.304875', 'failures': '1'}
    >>> len(root)
    4
    >>> expected = ET.XML(__junit_test_string)
    >>> def cleanup(elem):
    ...   elem.tail = ''
    ...   if elem.text: elem.text = elem.text.strip()
    ...   [cleanup(e) for e in elem]
    >>> cleanup(expected)
    >>> ET.tostring(expected, encoding='utf8') == ET.tostring(root, encoding='utf8')
    True
    """
    check_root = check_etree.getroot()
    ns, tag = split_ns_from_tag(check_root.tag)
    time = check_root.find('{%s}datetime' % ns)
    duration = check_root.find('{%s}duration' % ns)

    root = ET.Element('testsuite')

    if time is not None:
        date = dateutil.parser.parse(time.text)
        root.attrib['timestamp'] = date.isoformat()

    suites = (junit_tests_from_check_suite(suite) for suite in check_root.findall('{%s}suite' % ns))
    names = []
    test_count = 0
    for name, tests in suites:
        names.append(name)
        test_count += len([root.append(t) for t in tests])

    root.attrib['tests'] = str(test_count)
    root.attrib['name'] = ','.join(names)
    root.attrib['time'] = duration.text or ''
    root.attrib['failures'] = str(len(root.findall('.//failure')))
    root.attrib['errors'] = str(len(root.findall('.//error')))
    return ET.ElementTree(root)


def _parse_commandline_args(arglist):
    """
    >>> input_path, output_path = _parse_commandline_args("path1 -o path2".split())
    >>> input_path
    'path1'
    >>> output_path
    'path2'
    >>> input_path, output_path = _parse_commandline_args(["path1"])
    >>> input_path
    'path1'
    >>> output_path == sys.stdout
    True
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("input_path", help="The XML output file from Check")
    parser.add_argument("-o", "--output_path", help="The destination for the junit formatted XML output")
    args = parser.parse_args(arglist)
    output_path = args.output_path or sys.stdout
    return (args.input_path, output_path)


if __name__ == '__main__':
    input_path, output_path = _parse_commandline_args(sys.argv[1:])
    check_etree = ET.ElementTree(file=input_path)
    junit_tree = junit_etree_from_check_etree(check_etree)
    junit_tree.write(output_path, encoding='UTF-8', xml_declaration=True)
    if(junit_tree.find('.//failure') is not None or junit_tree.find('.//error') is not None):
        sys.exit(1)
    sys.exit(0)


__check_test_string = u'''<?xml version="1.0"?>
<testsuites xmlns="http://check.sourceforge.net/ns">
  <datetime>2004-08-20 12:53:32</datetime>
  <suite>
    <title>S1</title>
    <test result="success">
      <path>.</path>
      <fn>ex_xml_output.c:8</fn>
      <id>test_pass</id>
      <description>Core</description>
      <message>Passed</message>
    </test>
    <test result="failure">
      <path>.</path>
      <fn>ex_xml_output.c:14</fn>
      <id>test_fail</id>
      <description>Core</description>
      <message>Failure</message>
    </test>
    <test result="error">
      <path>.</path>
      <fn>ex_xml_output.c:18</fn>
      <id>test_exit</id>
      <description>Core</description>
      <message>Early exit with return value 1</message>
    </test>
  </suite>
  <suite>
    <title>S2</title>
    <test result="success">
      <path>.</path>
      <fn>ex_xml_output.c:26</fn>
      <id>test_pass2</id>
      <description>Core</description>
      <message>Passed</message>
    </test>
  </suite>
  <duration>0.304875</duration>
</testsuites>'''

__junit_test_string = u'''<?xml version="1.0"?>
<testsuite errors="1" failures="1" name="S1,S2" tests="4" time="0.304875" timestamp="2004-08-20T12:53:32">
  <testcase name="test_pass" classname="ex_xml_output.c:8" time="0.0" />
  <testcase name="test_fail" classname="ex_xml_output.c:14" time="0.0" >
    <failure message="Failure" />
  </testcase>
  <testcase name="test_exit" classname="ex_xml_output.c:18" time="0.0" >
    <error message="Early exit with return value 1" />
  </testcase>
  <testcase name="test_pass2" classname="ex_xml_output.c:26" time="0.0" />
</testsuite>'''
